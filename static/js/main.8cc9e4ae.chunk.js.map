{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_ALPH","SORT_LENGTH","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","reversed","setReversed","visibleGoods","goods","_ref","preparedGoods","_toConsumableArray","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","alphBtn","lengthBtn","reverseBtn","_jsxs","className","children","_jsx","type","concat","onClick","revers","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAY,OACZC,EAAc,SA0Bb,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAgCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBG,EA5BR,SAA0BC,EAAKC,GAA4B,IAAxBR,EAASQ,EAATR,UAAWI,EAAQI,EAARJ,SACtCK,EAAaC,YAAOH,GAgB1B,OAdIP,GACFS,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQb,GACN,KAAKP,EACH,OAAOmB,EAAME,cAAcD,GAC7B,KAAKnB,EACH,OAAOkB,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXX,EACKK,EAAcO,UAGhBP,EAOcQ,CAAiBzB,EAAiB,CACrDQ,YACAI,aAGIc,EAAUzB,IAAcO,EAAY,UAAY,oBAChDmB,EACFzB,IAAgBM,EAAY,cAAgB,uBAC1CoB,EAAahB,EAAW,aAAe,sBAE7C,OACEiB,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAS,UAAAI,OAAYR,GACrBS,QAAS,kBAAM1B,EAAaR,IAAW8B,SACxC,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAS,UAAAI,OAAYP,GACrBQ,QAAS,kBAAM1B,EAAaP,IAAa6B,SAC1C,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAS,UAAAI,OAAYN,GACrBO,QAAS,kBAAMtB,GAAY,SAAAuB,GAAM,OAAKA,MAAQL,SAC/C,aAICvB,GAAaI,IACboB,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVK,QAAS,WACPtB,GAAY,GACZJ,EAAa,KACbsB,SACH,aAMLC,cAAA,MAAAD,SACGjB,EAAauB,KAAI,SAAAC,GAAI,OACpBN,cAAA,MAAI,UAAQ,OAAMD,SAAEO,aClG9BC,IAASC,OACPR,cAAC7B,EAAG,IACJsC,SAASC,eAAe,W","file":"static/js/main.8cc9e4ae.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_ALPH = 'alph';\nconst SORT_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, reversed }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_ALPH:\n          return good1.localeCompare(good2);\n        case SORT_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reversed, setReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    reversed,\n  });\n\n  const alphBtn = SORT_ALPH === sortField ? 'is-info' : ' is-info is-light';\n  const lengthBtn\n    = SORT_LENGTH === sortField ? 'is-success ' : ' is-success is-light';\n  const reverseBtn = reversed ? 'is-warning' : 'is-warning is-light';\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button ${alphBtn}`}\n          onClick={() => setSortField(SORT_ALPH)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button ${lengthBtn}`}\n          onClick={() => setSortField(SORT_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button ${reverseBtn}`}\n          onClick={() => setReversed(revers => !revers)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReversed(false);\n              setSortField('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}